{
  "_from": "pump@^3.0.0",
  "_id": "pump@3.0.0",
  "_inBundle": false,
  "_integrity": "sha512-LwZy+p3SFs1Pytd/jYct4wpv49HiYCqd9Rlc5ZVdk0V+8Yzv6jR5Blk3TRmPL1ft69TxP0IMZGJ+WPFU2BFhww==",
  "_location": "/pump",
  "_phantomChildren": {
    "once": "1.4.0"
  },
  "_requested": {
    "escapedName": "pump",
    "fetchSpec": "^3.0.0",
    "name": "pump",
    "raw": "pump@^3.0.0",
    "rawSpec": "^3.0.0",
    "registry": true,
    "saveSpec": null,
    "type": "range"
  },
  "_requiredBy": [
    "#DEV:/",
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/pump/-/pump-3.0.0.tgz",
  "_shasum": "b4a2116815bde2f4e1ea602354e8c75565107a64",
  "_spec": "pump@^3.0.0",
  "_where": "C:\\Users\\koens\\Documents\\jazzytunes",
  "author": {
    "email": "mathiasbuus@gmail.com",
    "name": "Mathias Buus Madsen"
  },
  "browser": {
    "fs": false
  },
  "bugs": {
    "url": "https://github.com/mafintosh/pump/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "end-of-stream": "^1.1.0",
    "once": "^1.3.1"
  },
  "deprecated": false,
  "description": "pipe streams together and close all of them if one of them closes",
  "devDependencies": {},
  "homepage": "https://github.com/mafintosh/pump#readme",
  "keywords": [
    "streams",
    "pipe",
    "destroy",
    "callback"
  ],
  "license": "MIT",
  "name": "pump",
  "optionalDependencies": {},
  "readme": "# pump\r\n\r\npump is a small node module that pipes streams together and destroys all of them if one of them closes.\r\n\r\n```\r\nnpm install pump\r\n```\r\n\r\n[![build status](http://img.shields.io/travis/mafintosh/pump.svg?style=flat)](http://travis-ci.org/mafintosh/pump)\r\n\r\n## What problem does it solve?\r\n\r\nWhen using standard `source.pipe(dest)` source will _not_ be destroyed if dest emits close or an error.\r\nYou are also not able to provide a callback to tell when then pipe has finished.\r\n\r\npump does these two things for you\r\n\r\n## Usage\r\n\r\nSimply pass the streams you want to pipe together to pump and add an optional callback\r\n\r\n``` js\r\nvar pump = require('pump')\r\nvar fs = require('fs')\r\n\r\nvar source = fs.createReadStream('/dev/random')\r\nvar dest = fs.createWriteStream('/dev/null')\r\n\r\npump(source, dest, function(err) {\r\n  console.log('pipe finished', err)\r\n})\r\n\r\nsetTimeout(function() {\r\n  dest.destroy() // when dest is closed pump will destroy source\r\n}, 1000)\r\n```\r\n\r\nYou can use pump to pipe more than two streams together as well\r\n\r\n``` js\r\nvar transform = someTransformStream()\r\n\r\npump(source, transform, anotherTransform, dest, function(err) {\r\n  console.log('pipe finished', err)\r\n})\r\n```\r\n\r\nIf `source`, `transform`, `anotherTransform` or `dest` closes all of them will be destroyed.\r\n\r\nSimilarly to `stream.pipe()`, `pump()` returns the last stream passed in, so you can do:\r\n\r\n```\r\nreturn pump(s1, s2) // returns s2\r\n```\r\n\r\nIf you want to return a stream that combines *both* s1 and s2 to a single stream use\r\n[pumpify](https://github.com/mafintosh/pumpify) instead.\r\n\r\n## License\r\n\r\nMIT\r\n\r\n## Related\r\n\r\n`pump` is part of the [mississippi stream utility collection](https://github.com/maxogden/mississippi) which includes more useful stream modules similar to this one.\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/mafintosh/pump.git"
  },
  "scripts": {
    "test": "node test-browser.js && node test-node.js"
  },
  "version": "3.0.0"
}
